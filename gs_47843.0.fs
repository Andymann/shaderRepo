/*
{
  "CATEGORIES" : [
    "Automatically Converted",
    "GLSLSandbox"
  ],
  "INPUTS" : [

  ],
  "DESCRIPTION" : "Automatically converted from http:\/\/glslsandbox.com\/e#47843.0"
}
*/


#ifdef GL_ES
precision mediump float;
#endif
#extension GL_OES_standard_derivatives : enable
#define PI 3.14159265359

//int route[3368] = int[3368](1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1
//	,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,2,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,5,5,3,1,1,2,3,1,2,1,4,5,5,3,1,1,4,1,1,2,3,1,2,1,4,5,5,3,1,1,4,4,4,4);

int route[50];



mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}

float _box(in vec2 _st, in vec2 _size){
	vec2 _ST = _st + 0.5;
    vec2 uv = smoothstep(_size, _size+vec2(0.01), _ST);
    uv *= smoothstep(_size,  _size+vec2(0.01),  vec2(1.)-_ST);
    return min(uv.x, uv.y) * sqrt(uv.y*uv.x);
}

float _cross(in vec2 _st, float _size){
	
    return  _box(_st, vec2(_size,_size/4.)) +
            _box(_st, vec2(_size/4.,_size));
}

void main(){
	//float a[5] = float[5](3.4, 4.2, 5.0, 5.2, 1.1);
	int randNum = 0;
	for (int i = 0; i < 50; i++) {
		randNum += int(6.*(.5+.5*cos(gl_FragCoord.y/RENDERSIZE.y-TIME+float(i))));
		if (randNum >= 6) {
			randNum -= 5;
		}
		route[i] = randNum;
	}
    vec2 st = vv_FragNormCoord;
    vec3 color = vec3(0.0);
	float offset = 0.25;
	float scale = 2.5;
	float rotate = 0.25*sin(TIME)*PI;

	    for (int j = 0 ; j < 50; j++) {
		    color += vec3(_cross(st,0.4));
		    int current = route[j];
		    if (current == 1) {//F
			    // rotate the space
			    st = rotate2d( rotate ) * st;
		    } else if (current == 2) {//+
				st += vec2(1,1)*offset;
			        st *= scale;

		    } else if (current == 3) {//[

				st += vec2(-1,1)*offset;
			        st *= scale;

		    } else if (current == 4) {//]
				st += vec2(1,-1)*offset;
			        st *= scale;
		    } else if (current == 5) {//-
				st += vec2(-1,-1)*offset;
			        st *= scale;
		    }
      
	    }
    gl_FragColor = vec4(color,1.0);
}